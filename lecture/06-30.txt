kr.co.ca로 패키지를 만들면
url 주소가 ca로 끝나지만

======================================================================================================

servers의 모듈에서 path를 /를 남기고 지워주면 root - context에서 작업을 하게 만든다.

해당war파일을 ROOT.war(대문자root)을 톰캣에 놓어준다면 위의 과정없이 진행된다.
war file 추출방법 - 프로젝트 우클릭 export - warfile

서비스 - 포트번호없애는법 - 포트번호80
tomcat-conf-server.xml 8089->80
이클립스의톰캣과 개별적파일


컨트롤러만들어라
->
어노테이션붙어라
객체만들도록 servlet-context설정
======================================================================================================
requestmapping의 value에는 {"hello","HELLO"}와 같은 배열을 넣을 수 있다.
return 값인 string은 servlet-context의 InternalResourceViewResolver를통해
web-inf의views에있는 해당string.jsp가실행
======================================================================================================
get방식으로 서버가 넘겨주는 데이터를 한글 인코딩 하기 위해 
method를 만들어 인코딩하는 방식을 사용하지 않고
수업에서는 빠른 진도를 위해 한번만 해놓으면 되는 방법인 아래의 방법을 사용한다.
servers-tomcat v7.0~-server.xml의
65번line<Connector connectionTimeout="20000" port="8089" protocol="HTTP/1.1" redirectPort="8443"/>
에 URIEncoding="UTF-8"를 추가한다.

두방법 모두를 사용해 인코딩하면 인코딩작업이 충돌되어 에러가 뜬다.
======================================================================================================
spring mvc model기본구조
	 					    ▶		  ▶
					Controller  ◀	service   ◀	dao(repository)
		Handler Mapping			▲ ▼			▲	▼
	데이터처리방법요청▲▼컨트롤러에대한정보	▲ ▼			mybatis
고객		▶	   DispatcherServlet				▲	▼
		◀			   ▼▶	View Resolver		DBMS(oracle)
			   ▲ ▼		 ▲◀
			View(jsp)								


DispatcherServlet은 controller가 반환하는것이 어떤값인지 몰라
View Resolver를 통해 해석

기존과 차이점은 service는 dao와 비슷하지만 transaction작업 구현을 이곳에서하고

dao에서 하던 sql 작업을 mybatis에서 한다.

실직적으로 자주 구현하는것들
controller(command Class)
service(transaction구현)
dao
mybatis(sql 작업)
view(jsp)
======================================================================================================
pom.xml을 통한 dependancy 추가방법(maven을 통해 파일을 내려받는법)
받을것 
mybatis 3.2.8
mybatis-spring 1.2.2
spring-jdbc
spring-test

버전이 안나온것들은 스프링사용하는 버전인 4.2.1 
${org.springframework-version}코드를 버전에 넣어도 된다.
https://mvnrepository.com/
가장유명한 사이트

이곳에서 dependency 코드를 찾아 pom.xml dependencies에 넣는다.
======================================================================================================
jdbc관리 root-context에서 하는데
root-context의 namespace tab
aop/context/jdbc/mybatis/tx/추가하고 저장

maven에 있는
org.springframework.jdbc.datasource
의 
DriverManagerDataSource.class
copy q~name
org.springframework.jdbc.datasource.DriverManagerDataSource.class
.class제거하고 bean의 class로 넣어 bean 작성하여 객체생성
4가지 property 추가(driverclassname/url/username/password)
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property value="oracle.jdbc.driver.OracleDriver" name="driverClassName"></property>
<property value="jdbc:oracle:thin:@localhost:1521:xe" name="url"></property>
<property value="ca5" name="username"></property>
<property value="ca5" name="password"></property>
</bean>

======================================================================================================
mybatis 환경설정

maven에있는
mybatis-spring의 org.mybatis.spring에있는 sqlsessionfactorybean

property 객체참조할떄는ref 문자를참조하면string
property name = datasource는 위에서 작성한 datasource객체참조

<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
<property name="dataSource" ref="dataSource"></property>
</bean>
---------------
작성후 src/main/resources에 mybatis-config.xml 생성
mybatis-config.xml검색하여
https://mybatis.org/mybatis-3/ko/getting-started.html접속
xml에서 sqlsessionfacory빌드하기 코드 복사하여 넣고 저장(단 configuration안에 있는 코드는 지워준다.)

configuration 내부 작성내용
<typeAliases>
		<package name="kr.co.domain"/> <--이처럼 한번 작성하거나
		<typeAlias alias="MemberDTO" (type="kr.co.domain.MemberDTO"생략가능)/> <--이를 패키지안 클래스마다 작성
</typeAliases>
--------------
property로 mybatis 환경설정파일의 위치를 알려준다
<property name="configLocation" value="classpath:/mybatis-config.xml"></property>

======================================================================================================
jdbc연결 잘되었는지 테스트
src/test/java에 클래스성성
@runwith 어노테이션 붙이고 @RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration 어노테이션도 붙인다.
	file:(/World/제거)src/main/webapp/WEB-INF/spring/(root-context.xml servletcontext까지 
	고려하면 /**/*.xml로 대체 하는 경우도 있다.)
	@ContextConfiguration(locations = {"file:/src/main/webapp/WEB-INF/spring/**/*.xml"})

class안쪽에
@Auotowired(==@Inject) 어노테이션 적용
	private DataSource dataFactory; 변수선언
	기존까지는 이렇게 선언하면 datafactory는 null이었지만								autowired가 springframework가 관리하는 bean을 자동으로 넣어준다
@Test
테스트할 메소드에는 test어노테이션을 반드시 붙여준다.
반환형은 반드시 void 파라미터는 반드시 없어야 한다.

테스트시 모든 메서드를 테스트하려면 그냥 우클릭을통해 하고 특정 메소드만 하고 싶다면 메소드이름을 드래그 한 후 runas junit

======================================================================================================
Mybatis연결 잘되었는지 테스트
위와 동일
단 connnection대신 session
datafactory대신 SqlSessionFactory sqlFactory
session 연결은 sqlFactory의 openSession method
